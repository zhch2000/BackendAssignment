== This is the test cases command line ==

Important: 
How to pass multiple correct serialized JSON strings in command line:
1. Each string needs to quoted by double quote, such as: "{\"action\":\"jump\", \"time\":100}"
2. the double quote inside JSON string needs to replace with \"

Examples:
1. Run from main.go with 3 JSON input strings, run the following from command line
    
go run main.go "{\"action\":\"jump\", \"time\":100}" "{\"action\":\"run\", \"time\":75}" "{\"action\":\"jump\",\"time\":200}"
    
The results looks like the follow. The output sequence for addAction may be different since those are concurrent calls.  
First getStats Call returns:    
[]    
Inside addAction => Parsed Input JSON String: {"action":"run", "time":75}. Action: run, Time: 75    
Inside addAction => Parsed Input JSON String: {"action":"jump", "time":100}. Action: jump, Time: 100    
Inside addAction => Parsed Input JSON String: {"action":"jump","time":200}. Action: jump, Time: 200    
addAction Call returns No error    
addAction Call returns No error    
addAction Call returns No error    
Second getStats Call returns:    
[{"action":"run","avg":75},{"action":"jump","avg":150}]    
    
2. Run from Execution file such as BackendAssignment.exe with the follow from command line    
    
BackendAssignment "{\"action\":\"jump\", \"time\":100}" "{\"action\":\"run\", \"time\":75}" "{\"action\":\"jump\",\"time\":200}"    
    
Test cases (Working in Progress)    
Test Case 1 - 3 correct JSON inputs:    
    
go run main.go "{\"action\":\"jump\", \"time\":100}" "{\"action\":\"run\", \"time\":75}" "{\"action\":\"jump\",\"time\":200}"    
    
First getStats Call returns:    
[]    
Inside addAction => Parsed Input JSON String: {"action":"jump", "time":100}. Action: jump, Time: 100    
addAction Call returns No error    
Inside addAction => Parsed Input JSON String: {"action":"jump","time":200}. Action: jump, Time: 200    
addAction Call returns No error    
Inside addAction => Parsed Input JSON String: {"action":"run", "time":75}. Action: run, Time: 75    
addAction Call returns No error    
Second getStats Call returns:    
[{"action":"jump","avg":150},{"action":"run","avg":75}]    
    
Test Case 2 - Error in Time, not integer:        
    
go run main.go "{\"action\":\"jump\", \"time\":100}" "{\"action\":\"jump\", \"time\":75}" "{\"action\":\"jump\",\"time\":2s01}"    
    
First getStats Call returns:    
[]    
Inside addAction => Invalid Input JSON String: {"action":"jump","time":2s01}. Error: invalid character 's' after object key:value pair    
addAction Call returns Error: invalid character 's' after object key:value pair    
Inside addAction => Parsed Input JSON String: {"action":"jump", "time":75}. Action: jump, Time: 75    
Inside addAction => Parsed Input JSON String: {"action":"jump", "time":100}. Action: jump, Time: 100    
addAction Call returns No error    
addAction Call returns No error    
Second getStats Call returns:    
[{"action":"jump","avg":87.5}]    
    
Test Case 3 - Invalid JSON format:        
    
go run main.go "{\"action"\:\"jump\", \"time\":100" "{\"action\":\"run\", \"time\":75}" "{\"action\":\"jump\",\"time\":200}"   
    
Test Case 4 - No action in JSON:        
    
go run main.go "{\"act"\:\"jump\", \"time\":100" "{\"action\":\"run\", \"time\":75}" "{\"action\":\"jump\",\"time\":200}"    

    
